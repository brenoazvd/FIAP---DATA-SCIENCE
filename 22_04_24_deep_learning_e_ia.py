# -*- coding: utf-8 -*-
"""22_04_24 Deep Learning e IA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13GAfaZust87NAnPY2MrRoV-vFmrbZa_t

## Implementação de Funções de Ativação Neuronal para Introdução ao Deep Learning

##Breno Azevedo

**Introdução do deep learning**
"""

import numpy as np

inputs =  np.array([ 1,   2,    3])
weights = np.array([0.1, 0.2, 0.3])
bias = 1.25

#Funções de ativação de neurônio

def somatorio (entradas, pesos):
  '''total = 0
  for i in range(0,len(inputs)):
    total += entradas[i]*pesos[i]
  return'''
  return entradas.dot(pesos)

def degrau(soma):
  if soma >= 1:
    return 1
  return 0

def sigmoide(soma,bias):
  return 1 / (1 + np.exp(-(u + bias)))

u = somatorio(inputs, weights)
print(u)

output = degrau(u)
print(output)

#Exercicio DOIS

inputs =  np.array([ -1,   5,    0.2])
weights = np.array([0.11, -0.2, 4])

def somatorio (entradas, pesos):
  '''total = 0
  for i in range(0,len(inputs)):
    total += entradas[i]*pesos[i]
  return'''
  return entradas.dot(pesos)

def degrau(soma):
  if soma >= 1:
    return 1
  return 0

def sigmoide(soma,bias):
  return 1 / (1 + np.exp(-bias*soma))

u = somatorio(inputs, weights)
print(u)

output = sigmoide(u, bias)
print(output)

