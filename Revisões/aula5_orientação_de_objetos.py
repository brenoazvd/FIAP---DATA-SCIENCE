# -*- coding: utf-8 -*-
"""Aula5_orientação_de_objetos

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10fB4a0qeRnSJ3V9aXezSUWSPcwPCNF2i
"""

from time import sleep

class zumbi():
  def __init__(self, nome, cor, vida, velocidade=0.0, pos_x=800, pos_y=800):
    self.nome = nome
    self.cor = cor
    self.__vida = vida #atributo privado
    self.velocidade = velocidade
    self.pos_x = pos_x
    self.pos_y = pos_y

  def get_vida(self, nivel):
    if nivel >= 5:
      return self.__vida
    print("Não é possível ver a vida neste nível, seu noob")

  def __gravidade(self, altura_max, altura_inicial): #método privado
    self.pos_y = altura_max
    for i in range(altura_inicial, altura_max, 20):
      print(f"Altura atual do zumbi {self.nome} é {self.pos_y}")
      self.pos_y = i
      sleep(0.1)


  def andar(self, incremento_x):
    self.pos_x = self.pos_x + incremento_x

  def pular(self, incremento_y):
    if self.cor == "vermelho":
      altura_inicial = self.pos_y
      self.pos_y += incremento_y
      self.__gravidade(self.pos_y, altura_inicial)

zumbi1 = zumbi('Jorge', 'vermelho', 100, 10, 300, 200)

zumbi1.pular(300)

#método função(def) dentro da classe(class= criação do molde)
#atributo (nome, cor, pos.. etc)
#objeto "zumbi1" crianção do zumbi
#getters e setters (get = pegar(pega o dado do atributo e retorna), setters ("set= configura ("seta")o atributo com o dado)

zumbi1.nome = 'Joaquim'

zumbi1.nome

zumbi1.get_vida(5)

class Animal():
  def __init__(self, nome, cor): #método construtor (privado)
    self.__nome = nome
    self.__cor = cor

  @property #modificador de classe (get)
  def nome(self):
    return self.__nome

  @property #modificador de classe
  def cor(self):
    return self.__cor

  @nome.setter #set
  def nome(self, novo_nome):
    if novo_nome != "": # != "significa = diferente. Exemplo: diferente que nada"
      self.__nome = novo_nome

  @cor.setter #set
  def cor(self, nova_cor):
    if nova_cor != "":
      self.__cor = nova_cor

class Gato(Animal): # Classe com a primeira letra maiuscula
#a classe gato herda tudo do animal
  def __init__(self, nome, cor, ataque):
    super().__init__(nome, cor)
    self.ataque = ataque #atributo especializado da classe gato
  def miar(self): #metodo especializado para o gato
     print(f"o gato {self.nome} fez miauuu")#f = para que possa colocar variaveis no print
 #() sempre que você rodar um código você adiciona "()"

gatinho1 = Gato('João Luiz', 'amarelo', 'rasgar o estomâgo')
gatinho2 = Gato('Rodolfo', 'cinza', 'arranhão')

print(gatinho1.nome)
gatinho1.nome = "Garfield" #o modificar de classe, consegue atribuir a uma várival, por isto não é necessário os "()"
#quando não tem "=" entende chamar o setter
print(gatinho1.nome)

#primeiro eu printo o nome que está no mento e depois eu altero com o set e logo em seguida printo para visualizar o novo nome

gatinho1.miar()

gatinho1.nome #quando não tem "=" entende que deve chamar o getter

class Burro(Animal):
  def relinchar(self):#Metodo especializado da classe burro
    print(f"O burro {self.__nome} fez INHÓÓÓ INHÓÓÓ")

burro1 = Burro('Junior', 'preto')

burro1.relinchar()

