# -*- coding: utf-8 -*-
"""GS_2SEM_DEEP_LEARNING_AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PUSJSYGy3zttirHXCVMkRPKP441Q4Tmi

# Global Solutions 2TSC – 2º semestre de 2024 Deep Learning & AI Professor Hellynson

# Breno Rodrigues Azevedo RM556764

Classificador de Imagens para Identificação de Geradores Eólicos
"""

import zipfile
import os
import shutil
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
import matplotlib.pyplot as plt

zip_path = "/home/archive.zip"
extract_path = "/content/geradores_eolicos_dataset"

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print(f"Dataset extraído para: {extract_path}")

classes = ['geradores_eolicos', 'outros']
for cls in classes:
    cls_path = os.path.join(extract_path, 'archive', cls)
    images = os.listdir(cls_path)


    train, temp = train_test_split(images, test_size=0.2, random_state=42)
    val, test = train_test_split(temp, test_size=0.5, random_state=42)


    for split in ['train', 'val', 'test']:
        split_path = os.path.join(base_dir, split, cls)
        os.makedirs(split_path, exist_ok=True)


    for img in train:
        shutil.copy(os.path.join(cls_path, img), os.path.join(base_dir, 'train', cls))

    for img in val:
        shutil.copy(os.path.join(cls_path, img), os.path.join(base_dir, 'val', cls))

    for img in test:
        shutil.copy(os.path.join(cls_path, img), os.path.join(base_dir, 'test', cls))

print(f"Dataset organizado em: {base_dir}")

datagen = ImageDataGenerator(rescale=1.0/255)

train_gen = datagen.flow_from_directory(
    os.path.join(base_dir, 'train'),
    target_size=(128, 128),
    batch_size=32,
    class_mode='binary'
)

val_gen = datagen.flow_from_directory(
    os.path.join(base_dir, 'val'),
    target_size=(128, 128),
    batch_size=32,
    class_mode='binary'  # Produz rótulos no formato binário (0 ou 1)
)

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(1, activation='sigmoid')  # Saída binária (probabilidade entre 0 e 1)
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(
    train_gen,
    epochs=10,
    validation_data=val_gen
)

plt.plot(history.history['accuracy'], label='Acurácia Treino')
plt.plot(history.history['val_accuracy'], label='Acurácia Validação')
plt.legend()
plt.title("Acurácia do Modelo")
plt.show()

model_save_path = "/content/geradores_eolicos_model.h5"
model.save(model_save_path)
print(f"Modelo salvo em: {model_save_path}")

test_dir = "/content/organized_geradores_eolicos/test/geradores_eolicos"
test_images = os.listdir(test_dir)

if test_images:

    test_img_path = os.path.join(test_dir, test_images[0])
    print(f"Usando a imagem de teste: {test_img_path}")

    img = image.load_img(test_img_path, target_size=(128, 128))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

test_dir = "/content/organized_geradores_eolicos/test/geradores_eolicos"
test_images = os.listdir(test_dir)

if test_images:

    test_img_path = os.path.join(test_dir, test_images[0])
    print(f"Usando a imagem de teste: {test_img_path}")


    img = image.load_img(test_img_path, target_size=(128, 128))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)


    predictions = model.predict(img_array)
    predicted_class = "geradores_eolicos" if predictions[0][0] > 0.5 else "outros"
    print(f"Classe prevista: {predicted_class}")
else:
    print("Nenhuma imagem encontrada no diretório de teste.")